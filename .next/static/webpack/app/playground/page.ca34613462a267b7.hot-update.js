"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/playground/page",{

/***/ "(app-pages-browser)/./src/modules/typingTest/server/saveResult.ts":
/*!*****************************************************!*\
  !*** ./src/modules/typingTest/server/saveResult.ts ***!
  \*****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   saveTypingResult: function() { return /* binding */ saveTypingResult; }\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n\nasync function saveTypingResult(result) {\n    const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"typing_results\").insert([\n        result\n    ]);\n    if (error) {\n        console.error(\"Error saving typing result:\", error.message);\n    } else {\n        console.log(\"✅ Typing result saved to Supabase\");\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9tb2R1bGVzL3R5cGluZ1Rlc3Qvc2VydmVyL3NhdmVSZXN1bHQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMEM7QUFXbkMsZUFBZUMsaUJBQWlCQyxNQUFtRTtJQUN4RyxNQUFNLEVBQUVDLEtBQUssRUFBRSxHQUFHLE1BQU1ILG1EQUFRQSxDQUFDSSxJQUFJLENBQUMsa0JBQWtCQyxNQUFNLENBQUM7UUFBQ0g7S0FBTztJQUN2RSxJQUFJQyxPQUFPO1FBQ1RHLFFBQVFILEtBQUssQ0FBQywrQkFBK0JBLE1BQU1JLE9BQU87SUFDNUQsT0FBTztRQUNMRCxRQUFRRSxHQUFHLENBQUM7SUFDZDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9tb2R1bGVzL3R5cGluZ1Rlc3Qvc2VydmVyL3NhdmVSZXN1bHQudHM/N2VlOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdXBhYmFzZSB9IGZyb20gJ0AvbGliL3N1cGFiYXNlJztcblxuZXhwb3J0IGludGVyZmFjZSBUeXBpbmdTdGF0cyB7XG4gIHdwbTogbnVtYmVyO1xuICBhY2N1cmFjeTogbnVtYmVyO1xuICBtaXN0YWtlczogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfTtcbiAgdG90YWxUaW1lOiBudW1iZXI7XG4gIHRvdGFsQ2hhcmFjdGVyczogbnVtYmVyO1xuICBjb3JyZWN0Q2hhcmFjdGVyczogbnVtYmVyO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZVR5cGluZ1Jlc3VsdChyZXN1bHQ6IFR5cGluZ1N0YXRzICYgeyB1c2VyX2lkPzogc3RyaW5nIHwgbnVsbDsgc2VudGVuY2U6IHN0cmluZyB9KSB7XG4gIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmZyb20oJ3R5cGluZ19yZXN1bHRzJykuaW5zZXJ0KFtyZXN1bHRdKTtcbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3Igc2F2aW5nIHR5cGluZyByZXN1bHQ6JywgZXJyb3IubWVzc2FnZSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2coJ+KchSBUeXBpbmcgcmVzdWx0IHNhdmVkIHRvIFN1cGFiYXNlJyk7XG4gIH1cbn0iXSwibmFtZXMiOlsic3VwYWJhc2UiLCJzYXZlVHlwaW5nUmVzdWx0IiwicmVzdWx0IiwiZXJyb3IiLCJmcm9tIiwiaW5zZXJ0IiwiY29uc29sZSIsIm1lc3NhZ2UiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/modules/typingTest/server/saveResult.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/modules/typingTest/utils/useTypingTest.ts":
/*!*******************************************************!*\
  !*** ./src/modules/typingTest/utils/useTypingTest.ts ***!
  \*******************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useTypingTest: function() { return /* binding */ useTypingTest; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./engine */ \"(app-pages-browser)/./src/modules/typingTest/utils/engine.ts\");\n\n\nfunction useTypingTest(targetText) {\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [stats, setStats] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isComplete, setIsComplete] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [engine] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new _engine__WEBPACK_IMPORTED_MODULE_1__.TypingTestEngine(targetText));\n    // function useTypingTest(targetText: string): {\n    //     input: string;\n    //     stats: TypingStats | null;\n    //     isComplete: boolean;\n    //     handleInput: (value: string) => void;\n    //     reset: () => void;\n    // }   why is this in red ? because it is not used - why is it not used ? because it is not used in the app.tsx file - should i remove it ? yes - the function is already defined in the engine.ts file, so i can remove it from here.  \n    const handleInput = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        setInput(value);\n        const complete = engine.processInput(value);\n        setStats(engine.getStats());\n        setIsComplete(complete);\n    }, [\n        engine\n    ]);\n    const reset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setInput(\"\");\n        setStats(null);\n        setIsComplete(false);\n        engine.start();\n    }, [\n        engine\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        reset();\n    }, [\n        targetText,\n        reset\n    ]);\n    return {\n        input,\n        stats,\n        isComplete,\n        handleInput,\n        reset\n    };\n} //Yes, I fully understand your prompt — and I really like your approach. You’re not just trying to build quickly — you’re trying to understand deeply, which is how real mastery is built. 🔥\n // ⸻\n // Let’s slow it down and walk through this step-by-step with your context in mind.\n // ⸻\n // 🧠 Big Picture: Where does useTypingTest fit in?\n // 💡 You already nailed this:\n // \t•\tengine.ts = raw logic for calculating typing stats\n // \t•\tuseTypingTest.ts = wraps that logic in a way React components can safely and easily use\n // \t•\t✅ It connects the React state and UI to the logic in engine.ts\n // \t•\t✅ It exposes useful data (input, stats, isComplete) and functions (handleInput, reset) to your components\n // ⸻\n // 🧩 Think of it like this:\n // Imagine engine.ts is a car engine.\n // It knows how to drive — but it’s raw, mechanical, and doesn’t come with a steering wheel, dashboard, or speedometer.\n // useTypingTest.ts is the driver’s cockpit:\n // \t•\tIt gives you the dashboard (stats),\n // \t•\tThe steering wheel (handleInput),\n // \t•\tAnd the ignition/reset button (reset)\n // ⸻\n // 📦 What does useTypingTest actually do?\n // Here’s a super clear breakdown of each part:\n // ⸻\n // 1. const [input, setInput] = useState('')\n // This is a React hook that stores the current string the user is typing.\n // So if the user types: The quick,\n // input === 'The quick'\n // This is what your UI will display and track live.\n // ⸻\n // 2. const [stats, setStats] = useState<TypingStats | null>(null)\n // This holds the live stats coming from the engine:\n // \t•\tWPM\n // \t•\tAccuracy\n // \t•\tMistakes\n // After every keystroke, this will be updated and can be shown in the UI.\n // ⸻\n // 3. const [isComplete, setIsComplete] = useState(false)\n // This tells the UI whether the typing test is done.\n // If the user finishes typing the whole paragraph, this becomes true.\n // You might use this to show a “Congrats” screen or to stop the timer.\n // ⸻\n // 4. const [engine] = useState(() => new TypingTestEngine(targetText))\n // We create a new instance of your TypingTestEngine, passing in the sentence to type.\n // This engine will:\n // \t•\tStart the timer\n // \t•\tCompare the user’s input to the sentence\n // \t•\tTrack mistakes\n // We store it in React useState so that it doesn’t get reset on every re-render.\n // ⸻\n // 5. handleInput(value)\n // This is the most important function.\n // Every time the user types a letter:\n // \t•\thandleInput() is called\n // \t•\tIt updates input state (so the UI shows the letters)\n // \t•\tIt sends the input to the engine\n // \t•\tIt updates the live stats\n // \t•\tIt checks if typing is complete\n // You’ll pass this function to your input box — and the whole loop is wired up.\n // ⸻\n // 6. reset()\n // Resets everything:\n // \t•\tClears the input\n // \t•\tClears the stats\n // \t•\tRestarts the timer in the engine\n // You’ll use this when the user wants to try again or when you load a new sentence.\n // ⸻\n // 7. useEffect(() => { reset(); }, [targetText])\n // This makes sure the test is automatically reset when the sentence changes.\n // Imagine you press “New Paragraph” — it clears and starts over.\n // ⸻\n // 8. What gets returned?\n // return {\n //   input,         // The string the user has typed so far\n //   stats,         // The live WPM, accuracy, mistakes, etc.\n //   isComplete,    // Whether the test is done\n //   handleInput,   // Function to call on every keypress\n //   reset,         // Function to reset the test\n // };\n // You’ll use these directly inside TypingBox.tsx or your UI.\n // ⸻\n // 🧠 Summary\n // Element\tWhat it is\tWhy it matters\n // input\tThe user’s current typing\tNeeded to display progress in real-time\n // handleInput\tCalled on every keypress\tUpdates engine + state\n // stats\tWhat comes out of the engine\tUsed for analytics/feedback after test\n // isComplete\tWhether they finished typing the sentence\tCan be used to trigger a results view\n // reset\tClears the test\tFor retry or changing sentences\n // ⸻\n // ✅ Do You Understand So Far?\n // Here’s a quick comprehension check — feel free to answer casually:\n // \t1.\tIn your own words, what is the role of useTypingTest?\n // \t2.\tWhen might the reset() function be triggered?\n // \t3.\tWhy do we wrap the engine inside a hook instead of calling it directly in the component?\n // If you want, we can move to TypingBox.tsx next. But I’m happy to sit here with this part until you feel clear and confident.\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/modules/typingTest/utils/useTypingTest.ts\n"));

/***/ })

});